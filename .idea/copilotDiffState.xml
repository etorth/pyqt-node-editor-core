<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/__init__.py" />
              <option name="updatedContent" value="# Package marker" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/nodes/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/nodes/__init__.py" />
              <option name="updatedContent" value="# Package marker" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/nodes/conditionchecker_hasItem.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/nodes/conditionchecker_hasItem.py" />
              <option name="originalContent" value="# -*- coding: utf-8 -*-&#10;from PySide6.QtGui import *&#10;from PySide6.QtCore import *&#10;from PySide6.QtWidgets import *&#10;&#10;from qdopnode import *&#10;from qdutils import *&#10;from qdopnodecontentgfx import *&#10;&#10;&#10;class _ConditionCheckerContentGfx_hasItem(QD_OpNodeContentGfx):&#10;    def initUI(self):&#10;        self.choice = QComboBox()&#10;        self.choice.addItems([&quot;大于&quot;, &quot;小于&quot;, &quot;等于&quot;, &quot;不等于&quot;, &quot;不大于&quot;, &quot;不小于&quot;])&#10;&#10;        self.edit = QLineEdit()&#10;        self.edit.setValidator(QIntValidator())&#10;        self.edit.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        self.edit.editingFinished.connect(self.onEditingFinished)&#10;&#10;        self.items = QComboBox()&#10;        self.items.addItems([&quot;太阳水&quot;, &quot;龙纹剑&quot;, &quot;幽灵战衣（男）&quot;, &quot;金币&quot;])&#10;&#10;        self.hbox = QHBoxLayout(self)&#10;        self.hbox.setContentsMargins(10, 10, 10, 10)&#10;        self.hbox.setSpacing(5)&#10;&#10;        self.hbox.addWidget(QLabel('拥有'))&#10;        self.hbox.addWidget(self.choice)&#10;        self.hbox.addWidget(self.edit)&#10;        self.hbox.addWidget(QLabel('件'))&#10;        self.hbox.addWidget(self.items)&#10;&#10;&#10;    def onEditingFinished(self):&#10;        if self.content.node:&#10;            if self.edit.text():&#10;                if int(self.edit.text()) &lt; 0:&#10;                    self.content.node.markInvalid(True)&#10;                    self.content.node.gfx.setToolTip('Invalid level integer')&#10;                else:&#10;                    self.content.node.markInvalid(False)&#10;                    self.content.node.gfx.setToolTip('')&#10;            else:&#10;                self.content.node.markDirty(True)&#10;&#10;&#10;class _ConditionCheckerContent_hasItem(QD_OpNodeContent):&#10;    NodeContentGfx_class = _ConditionCheckerContentGfx_hasItem&#10;&#10;&#10;    def serialize(self):&#10;        data = super().serialize()&#10;        data['choice'] = self.gfx.choice.currentIndex()&#10;        data['value'] = self.gfx.edit.text()&#10;        data['item'] = self.gfx.items.currentIndex()&#10;        return data&#10;&#10;&#10;    def deserialize(self, data, hashmap={}, restore_id: bool = True):&#10;        super().deserialize(data, hashmap)&#10;        self.gfx.choice.setCurrentIndex(data['choice'])&#10;        self.gfx.edit.setText(data['value'])&#10;        self.gfx.items.setCurrentIndex(data['item'])&#10;        return True&#10;&#10;&#10;@utils.opNodeRegister&#10;class _ConditionChecker_hasItem(QD_OpNode):&#10;    icon = &quot;icons/checker.png&quot;&#10;    op_type = OPS_CHECKER&#10;    opTitle = &quot;拥有物品&quot;&#10;&#10;    NodeContent_class = _ConditionCheckerContent_hasItem&#10;&#10;    def __init__(self, scene):&#10;        super().__init__(scene, sockets={SocketType.In, SocketType.Out_True, SocketType.Out_False})&#10;        self.eval()&#10;&#10;&#10;    def initInnerClasses(self):&#10;        super().initInnerClasses()&#10;        self.content.gfx.edit.textChanged.connect(self.onInputChanged)&#10;&#10;&#10;    def evalImplementation(self):&#10;        self.value = 12&#10;        self.markDirty(False)&#10;        self.markInvalid(False)&#10;&#10;        self.markDescendantsInvalid(False)&#10;        self.markDescendantsDirty()&#10;&#10;        self.gfx.setToolTip(&quot;&quot;)&#10;&#10;        self.evalChildren()&#10;        return self.value&#10;" />
              <option name="updatedContent" value="# -*- coding: utf-8 -*-&#10;from ..qdopnode import QD_OpNode&#10;from ..qdopnodecontent import QD_OpNodeContent&#10;from ..qdopnodecontentgfx import QD_OpNodeContentGfx&#10;from ..qdutils import utils, SocketType, OPS_CHECKER&#10;&#10;from PySide6.QtWidgets import QComboBox, QLineEdit, QHBoxLayout, QLabel&#10;from PySide6.QtGui import QIntValidator&#10;from PySide6.QtCore import Qt&#10;&#10;&#10;class _ConditionCheckerContentGfx_hasItem(QD_OpNodeContentGfx):&#10;    def initUI(self):&#10;        self.choice = QComboBox()&#10;        self.choice.addItems([&quot;大于&quot;, &quot;小于&quot;, &quot;等于&quot;, &quot;不等于&quot;, &quot;不大于&quot;, &quot;不小于&quot;])&#10;&#10;        self.edit = QLineEdit()&#10;        self.edit.setValidator(QIntValidator())&#10;        self.edit.setAlignment(Qt.AlignmentFlag.AlignCenter)&#10;        self.edit.editingFinished.connect(self.onEditingFinished)&#10;&#10;        self.items = QComboBox()&#10;        self.items.addItems([&quot;太阳水&quot;, &quot;龙纹剑&quot;, &quot;幽灵战衣（男）&quot;, &quot;金币&quot;])&#10;&#10;        self.hbox = QHBoxLayout(self)&#10;        self.hbox.setContentsMargins(10, 10, 10, 10)&#10;        self.hbox.setSpacing(5)&#10;&#10;        self.hbox.addWidget(QLabel('拥有'))&#10;        self.hbox.addWidget(self.choice)&#10;        self.hbox.addWidget(self.edit)&#10;        self.hbox.addWidget(QLabel('件'))&#10;        self.hbox.addWidget(self.items)&#10;&#10;&#10;    def onEditingFinished(self):&#10;        if self.content.node:&#10;            if self.edit.text():&#10;                if int(self.edit.text()) &lt; 0:&#10;                    self.content.node.markInvalid(True)&#10;                    self.content.node.gfx.setToolTip('Invalid level integer')&#10;                else:&#10;                    self.content.node.markInvalid(False)&#10;                    self.content.node.gfx.setToolTip('')&#10;            else:&#10;                self.content.node.markDirty(True)&#10;&#10;&#10;class _ConditionCheckerContent_hasItem(QD_OpNodeContent):&#10;    NodeContentGfx_class = _ConditionCheckerContentGfx_hasItem&#10;&#10;&#10;    def serialize(self):&#10;        data = super().serialize()&#10;        data['choice'] = self.gfx.choice.currentIndex()&#10;        data['value'] = self.gfx.edit.text()&#10;        data['item'] = self.gfx.items.currentIndex()&#10;        return data&#10;&#10;&#10;    def deserialize(self, data, hashmap=None, restore_id: bool = True):&#10;        if hashmap is None:&#10;            hashmap = {}&#10;        super().deserialize(data, hashmap)&#10;        self.gfx.choice.setCurrentIndex(data['choice'])&#10;        self.gfx.edit.setText(data['value'])&#10;        self.gfx.items.setCurrentIndex(data['item'])&#10;        return True&#10;&#10;&#10;@utils.opNodeRegister&#10;class _ConditionChecker_hasItem(QD_OpNode):&#10;    icon = &quot;icons/checker.png&quot;&#10;    op_type = OPS_CHECKER&#10;    opTitle = &quot;拥有物品&quot;&#10;&#10;    NodeContent_class = _ConditionCheckerContent_hasItem&#10;&#10;    def __init__(self, scene):&#10;        super().__init__(scene, sockets={SocketType.In, SocketType.Out_True, SocketType.Out_False})&#10;        self.eval()&#10;&#10;&#10;    def initInnerClasses(self):&#10;        super().initInnerClasses()&#10;        self.content.gfx.edit.textChanged.connect(self.onInputChanged)&#10;&#10;&#10;    def evalImplementation(self):&#10;        self.value = 12&#10;        self.markDirty(False)&#10;        self.markInvalid(False)&#10;&#10;        self.markDescendantsInvalid(False)&#10;        self.markDescendantsDirty()&#10;&#10;        self.gfx.setToolTip(&quot;&quot;)&#10;&#10;        self.evalChildren()&#10;        return self.value" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/statenodes/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/statenodes/__init__.py" />
              <option name="updatedContent" value="# Package marker" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>